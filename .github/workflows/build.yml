name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:

  release:
    permissions: write-all
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          prerelease: false
          generateReleaseNotes: true

  build:
    permissions: write-all
    name: Build
    needs: release
    runs-on: ${{ matrix.os }}
    env:
      dist-name: ESurfingPy-CLI
    strategy:
      matrix:
        os: [windows-2019, ubuntu-20.04, macos-11.0]
        python-version: ['3.10']

    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'

    - name: Check out
      uses: actions/checkout@v3

    - name: Install dependencies
      run: pip3 install -r requirements.txt

    - name: Install Nuitka and dependencies
      run: pip3 install nuitka ordered-set zstandard

    - name: Build for Windows
      if: ${{ matrix.os == 'windows-2019' }}
      run: python -m nuitka --assume-yes-for-downloads --include-package-data=ddddocr --output-dir=dist --output-filename=${{ env.dist-name }} --remove-output --onefile main.py

    - name: Build for Ubuntu & macOS
      if: ${{ matrix.os != 'windows-2019' }}
      run: python3 -m nuitka --assume-yes-for-downloads --include-package-data=ddddocr --output-dir=dist --output-filename=${{ env.dist-name }} --remove-output --onefile main.py

    - name: Package
      working-directory: dist
      run: tar -zcvf ../${{ env.dist-name }}_${{ matrix.os }}.tar.gz -c ./*

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }} Build
        path: ${{ env.dist-name }}_${{ matrix.os }}.tar.gz

    - name: Upload assets
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{ env.dist-name }}_${{ matrix.os }}.tar.gz
        asset_name: ${{ env.dist-name }}_${{ matrix.os }}.tar.gz
        asset_content_type: application/gzip